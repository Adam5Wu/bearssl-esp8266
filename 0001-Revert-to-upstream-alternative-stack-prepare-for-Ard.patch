From 7ac44d75d4173341cfd3eb09059205d59c806703 Mon Sep 17 00:00:00 2001
From: Zhenyu Wu <Adam_5Wu@hotmail.com>
Date: Wed, 18 Apr 2018 00:13:38 -0400
Subject: [PATCH] Revert to upstream alternative stack, prepare for Arduino
 cont context relocation


diff --git a/README.md b/README.md
index 138c8ff..0d0e240 100644
--- a/README.md
+++ b/README.md
@@ -5,7 +5,7 @@
 [![License](https://img.shields.io/github/license/Adam5Wu/bearssl-esp8266.svg)](./LICENSE.txt)
 
 BearSSL port for ESP8266.
-Reverted custom stack proxy, works better with AsyncTCP.
+With small patches, works better with AsyncTCP.
 
 * [Upstream Project](https://github.com/earlephilhower/bearssl-esp8266)
 * [Modifications of this fork](MODIFICATIONS.md)
diff --git a/src/inner.h b/src/inner.h
index 56ad621..6bd9aa5 100644
--- a/src/inner.h
+++ b/src/inner.h
@@ -1,7 +1,7 @@
 /*
  * Copyright (c) 2016 Thomas Pornin <pornin@bolet.org>
  *
- * Permission is hereby granted, free of charge, to any person obtaining
+ * Permission is hereby granted, free of charge, to any person obtaining 
  * a copy of this software and associated documentation files (the
  * "Software"), to deal in the Software without restriction, including
  * without limitation the rights to use, copy, modify, merge, publish,
@@ -9,12 +9,12 @@
  * permit persons to whom the Software is furnished to do so, subject to
  * the following conditions:
  *
- * The above copyright notice and this permission notice shall be
+ * The above copyright notice and this permission notice shall be 
  * included in all copies or substantial portions of the Software.
  *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
@@ -2351,7 +2351,7 @@ br_cpuid(uint32_t mask_eax, uint32_t mask_ebx,
 
 #endif
 
-#if defined(ESP8266) && ESP8266_ALTSTACK
+#ifdef ESP8266
 
   #ifdef __cplusplus
   extern "C" {
@@ -2359,7 +2359,6 @@ br_cpuid(uint32_t mask_eax, uint32_t mask_ebx,
 
   #define _debugBearSSL (0)
   extern void optimistic_yield(uint32_t);
-  extern void system_soft_wdt_feed();
   extern void br_stack_proxy_enter();
   extern void *br_stack_proxy_alloc(size_t bytes);
   extern void br_stack_proxy_exit();
@@ -2370,7 +2369,7 @@ br_cpuid(uint32_t mask_eax, uint32_t mask_ebx,
   #define STACK_PROXY_EXIT()  { if (_debugBearSSL) { char b[64]; sprintf(b, "EXIT: %s:%s\n", __FILE__, __FUNCTION__ ); _BearSSLSerialPrint(b); } br_stack_proxy_exit();  }
   #define STACK_PROXY_ALLOC(type, name, count) \
 		type *name = (type *)br_stack_proxy_alloc(sizeof(type) * (count));\
-		if (!name) name = (type *)alloca(sizeof(type) * (count));
+		if (!name) name = (type *)alloca(sizeof(type) * (count)); 
   #define dumpstack() if (_debugBearSSL) _BearSSLCheckStack(__FUNCTION__, __FILE__, __LINE__); else {}
 
   #ifdef __cplusplus
@@ -2383,13 +2382,6 @@ br_cpuid(uint32_t mask_eax, uint32_t mask_ebx,
   #define STACK_PROXY_ALLOC(type, name, count) type name[count]
   #define dumpstack()
   #define optimistic_yield(ignored)
-
-  #if defined(ESP8266)
-  extern void system_soft_wdt_feed();
-  #else
-  #define system_soft_wdt_feed()
-  #endif
-
 #endif
 
 
diff --git a/src/port/esp8266_stack_proxy.c b/src/port/esp8266_stack_proxy.c
index 84ddcc3..d1bdea1 100644
--- a/src/port/esp8266_stack_proxy.c
+++ b/src/port/esp8266_stack_proxy.c
@@ -73,13 +73,11 @@ void *br_stack_proxy_alloc(size_t bytes)
 		return (void*)ptr;
 	}
 	// If we're here, the 2nd stack allocation failed.  Record if in debug mode
-#if DEBUG_BEARSSL
-	{
+	if (_debugBearSSL) {
 		char a[32];
 		sprintf(a,"stack2 alloc %d fail\n", bytes);
 		_BearSSLSerialPrint(a);
 	}
-#endif
 	return NULL;
 }
 
-- 
2.16.1.windows.4

